package game;

import game.graphics.Render;
import game.input.Input;
import game.level.Level;

import java.awt.Canvas;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JFrame;

public class Engine extends Canvas implements Runnable {

	private static final long serialVersionUID = 1L;

	public static int WIDTH = 2 * (int) Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 3;
	public static int HEIGHT = 2 * (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 3;

	public static String title;

	private JFrame frame;
	private Thread mainThread;
	private BufferedImage img;
	private BufferedImage bg;
	private Render render;
	private Input input;
	private Level level;

	private boolean running;

	private int[] pixels;
	private int[] bgPixels;

	public Engine() {
		frame = new JFrame(title = "Tag Game");
		input = new Input();
		addMouseListener(input);
		addMouseWheelListener(input);
		addKeyListener(input);
		frame.addMouseListener(input);
		frame.addMouseWheelListener(input);
		frame.addKeyListener(input);
		frame.setPreferredSize(new Dimension(WIDTH, HEIGHT));
		frame.add(this);
		frame.addComponentListener(new ComponentAdapter() {
			public void componentResized(ComponentEvent e) {
				refreshDisplay();
			}
		});
		frame.pack();
		frame.setVisible(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLocationRelativeTo(null);
		refreshDisplay();
		level = new Level(100, 100);
		level.yOffs = -850;
		try {
			bg = ImageIO.read(Engine.class.getResource("/sprite/Background.png"));
			bgPixels = ((DataBufferInt) bg.getRaster().getDataBuffer()).getData();
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
		}
		start();
	}

	private void refreshDisplay() {
		WIDTH = getWidth();
		HEIGHT = getHeight();
		img = new BufferedImage(getDisplayWidth(), getDisplayHeight(), BufferedImage.TYPE_INT_ARGB);
		pixels = ((DataBufferInt) img.getRaster().getDataBuffer()).getData();
		render = new Render(getDisplayWidth(), getDisplayHeight());
	}

	private synchronized void start() {
		if (running)
			return;
		running = true;
		mainThread = new Thread(this);
		mainThread.start();
	}

	public void run() {
		long last = System.nanoTime();
		long timer = System.currentTimeMillis();
		double ns = 1_000_000_000.0 / 60.0;
		double delta = 0;
		int frames = 0;
		int ticks = 0;
		while (running) {
			long now = System.nanoTime();
			delta += (now - last) / ns;
			last = now;
			try {
				refreshDisplay();
				while (delta >= 1) {
					tick();
					ticks++;
					delta--;
				}
				render();
				frames++;
				if (System.currentTimeMillis() - timer >= 1_000) {
					timer = System.currentTimeMillis();
					frame.setTitle(title + " | FPS: " + frames + " | TPS: " + ticks);
					frames = ticks = 0;
				}
			} catch (Exception e) {
				continue;
			}
		}
	}

	private void tick() {
		if (input.up)
			level.yOffs++;
		else if (input.down)
			level.yOffs--;
		if (input.left)
			level.xOffs++;
		else if (input.right)
			level.xOffs--;
		level.update();
		Time.update();
	}

	private void render() {
		BufferStrategy bs = getBufferStrategy();
		if (bs == null) {
			createBufferStrategy(3);
			return;
		}
		Graphics g = bs.getDrawGraphics();
		for (int i = 0; i < bgPixels.length; i++)
			bgPixels[i] = Time.darkenForTime(bgPixels[i]);
		g.drawImage(bg, 0, 0, WIDTH, HEIGHT, null);
		render.clear(0);
		level.render(render);
		for (int i = 0; i < pixels.length; i++)
			pixels[i] = render.pixels[i] == 0 ? 0 : Time.darkenForTime(render.pixels[i]);
		g.drawImage(img, 0, 0, WIDTH, HEIGHT, null);
		g.dispose();
		bs.show();
	}

	private int getDisplayWidth() {
		return (int) ((float) WIDTH / input.scale);
	}

	private int getDisplayHeight() {
		return (int) ((float) HEIGHT / input.scale);
	}
}
